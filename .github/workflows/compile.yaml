name: Compile LaTeX and HTML
on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-18.04

    strategy:
      matrix:
        cubical-ref: ["v0.2"]
        agda-ref: ["v2.6.1"]
        agda-stdlib-ref: ["v1.3"]
        ghc-ver: ["8.10.1"]
        cabal-ver: ["3.2"]

    steps:

# Install Agda
    - uses: actions/cache@v2
      name: Cache cabal packages
      id: cache-cabal
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          ~/.cabal/bin
          dist-newstyle
        key: ${{ runner.os }}-${{ matrix.ghc-ver }}-${{ matrix.cabal-ver }}-${{ matrix.agda-ref }}

    - name: Install cabal
      if: steps.cache-cabal.outputs.cache-hit != 'true'
      uses: actions/setup-haskell@v1.1
      with:
        ghc-version: ${{ matrix.ghc-ver }}
        cabal-version: ${{ matrix.cabal-ver }}

    - name: Put cabal programs in PATH
      run: echo "::add-path::~/.cabal/bin"

    - name: Download Agda from github
      if: steps.cache-cabal.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        repository: agda/agda
        path: agda
        ref: ${{ matrix.agda-ref }}
      
    - name: Install Agda
      if: steps.cache-cabal.outputs.cache-hit != 'true'
      run: |
        cabal update
        cabal install --overwrite-policy=always --ghc-options='-O2 +RTS -M6G -RTS' alex-3.2.5
        cabal install --overwrite-policy=always --ghc-options='-O2 +RTS -M6G -RTS' happy-1.19.12
        cd agda
        mkdir -p doc
        touch doc/user-manual.pdf
        cabal install --overwrite-policy=always --ghc-options='-O1 +RTS -M6G -RTS'

    - name: Install lhs2tex
      if: steps.cache-cabal.outputs.cache-hit != 'true'
      run: |
        cabal update
        cabal install --overwrite-policy=always --ghc-options='-O2 +RTS -M6G -RTS' lhs2tex-1.24

# Download and compile Agda libraries

#     - name: Checkout agda standard library
#       uses: actions/checkout@v2
#       with:
#         repository: agda/agda-stdlib
#         path: agda-stdlib
#         ref: ${{ matrix.agda-stdlib-ref }}

#     - name: Cache agda standard library
#       uses: actions/cache@v2
#       id: cache-agda-stdlib
#       with:
#         path: ~/agda-stdlib-build
#         key: ${{ runner.os }}-${{ matrix.agda-ver }}-${{ matrix.agda-stdlib-ref }}

#     - name: Compile Agda standard library
#       if: steps.cache-agda-stdlib.outputs.cache-hit != 'true'
#       run: |
#         cd $GITHUB_WORKSPACE/agda-stdlib
#         sh travis/index.sh
#         echo "module Everything where" > src/Everything.agda
#         cat index.agda >> src/Everything.agda
#         agda src/Everything.agda
#         rm src/Everything.agda
#         cp -f -r _build/ ~/agda-stdlib-build

#     - name: Retrieve Agda standard library
#       if: steps.cache-agda-stdlib.outputs.cache-hit == 'true'
#       run: |
#         mkdir -p agda-stdlib/_build
#         cp -f -r ~/agda-stdlib-build/* agda-stdlib/_build
        
    - name: Checkout cubical library
      uses: actions/checkout@v2
      with:
        repository: agda/cubical
        path: cubical
        ref: ${{ matrix.cubical-ref }}

    - name: Cache cubical library
      uses: actions/cache@v2
      id: cache-cubical
      with:
        path: ~/cubical-build
        key: ${{ runner.os }}-${{ matrix.agda-ver }}-${{ matrix.cubical-ref }}

    - name: Compile cubical library
      if: steps.cache-cubical.outputs.cache-hit != 'true'
      run: |
        cd $GITHUB_WORKSPACE/cubical
        find "Cubical/Algebra" "Cubical/Categories" "Cubical/Data" "Cubical/Functions" "Cubical/HITs" "Cubical/Modalities" "Cubical/Relation" "Cubical/Structures" "Cubical/ZCohomology" -type f -name '*.agda' | while read -r code ; do
          agda $code
        done
        agda Cubical/Codata/Everything.agda
        agda Cubical/Core/Everything.agda
        agda Cubical/Foundations/Everything.agda
        agda Cubical/WithK.agda
        cp -f -r _build/ ~/cubical-build

    - name: Retrieve cubical library
      if: steps.cache-cubical.outputs.cache-hit == 'true'
      run: |
        mkdir -p cubical/_build
        cp -f -r ~/cubical-build/* cubical/_build
        
    - name: Put Agda libraries in Agda library list
      run: |
        mkdir -p ~/.agda/
        touch ~/.agda/libraries
        echo "$GITHUB_WORKSPACE/cubical/cubical.agda-lib" >> ~/.agda/libraries
#        echo "$GITHUB_WORKSPACE/agda-stdlib/standard-library.agda-lib" >> ~/.agda/libraries
        
# Download this git repo
    - name: Checkout main
      uses: actions/checkout@v2
      with:
        path: main

# Compile Haskell
    - uses: actions/cache@v2
      name: Cache literate Haskell
      id: cache-lhs
      with:
        path: ~/lhs-build
        key: ${{ runner.os }}-${{ matrix.ghc-ver }}-${{ hashFiles('main/haskell/**') }}
      
    - name: Add literate haskell sty files
      run: |
        cd main
        if [ ! -f "locallhs2TeX.lhs" ]; then
            echo "%include polycode.fmt" > "locallhs2TeX.lhs"
        fi
        if [ ! -f "locallhs2TeX.sty" ]; then
            lhs2TeX -o "locallhs2TeX.sty" "locallhs2TeX.lhs"
        fi
        
    - name: Compile literate Haskell
      if: steps.cache-lhs.outputs.cache-hit != 'true'
      run: |
        cd main/haskell
        find . -type f -name '*.lhs' | while read -r code ; do
            lhs2Tex -o ${code%.lhs}.tex "$code"
        done
        cd ..
        cp -f -R haskell/* ~/lhs-build/
      
#     - name: Retrieve literate Haskell
#       if: steps.cache-lhs.outputs.cache-hit == 'true'
#       run: cp -f -R ~/lhs-build/* $GITHUB_WORKSPACE/main/haskell

# # Compile Agda

#     - uses: actions/cache@v2
#       name: Cache agda code
#       id: cache-agda
#       with:
#         path: ~/main-build
#         key: html-and-tex-${{ runner.os }}-${{ matrix.agda-ver }}-${{ matrix.agda-stdlib-ref }}-${{ matrix.cubical-ref }}-${{ hashFiles('main/agda/**') }}
#         restore-keys: html-and-tex-${{ runner.os }}-${{ matrix.agda-ver }}-${{ matrix.agda-stdlib-ref }}-${{ matrix.cubical-ref }}-

#     - name: Retrieve main library
#       if: steps.cache-agda.outputs.cache-hit == 'true'
#       run: cp -f -R ~/main-build/* $GITHUB_WORKSPACE/main/agda

#     - name: Compile main library
#       if: steps.cache-agda.outputs.cache-hit != 'true'
#       run: |
#         mkdir -p ~/main-build/_build
#         cp -f -R ~/main-build/_build $GITHUB_WORKSPACE/main/agda/_build
#         rm -r ~/main-build
#         sudo apt-get install texlive-binaries
#         cd main/agda
#         find . -type f -name '*.lagda' | while read -r code ; do
#             agda --latex --latex-dir=. $code
#         done
#         echo '{-# OPTIONS --cubical --safe #-}' > Everything
#         echo 'module Everything where' >> Everything
#         find . -type f -regex '.*\.l?agda' | cut -c 3- | cut -f1 -d'.' | sed 's/\//\./g' | sed 's/^/open import /' >> Everything
#         mv Everything Everything.agda
#         agda --html --html-dir=../docs Everything.agda
#         rm Everything.agda
#         cd ..
#         cp -f -R agda/ ~/main-build/

# # Compile pdf
#     - name: Remove .latexmkrc
#       run: rm main/.latexmkrc

#     - name: Compile latex
#       uses: xu-cheng/latex-action@v2
#       with:
#         working_directory: main
#         root_file: paper.tex

#     - name: Upload generated pdf
#       uses: actions/upload-artifact@v2
#       with:
#         name: paper
#         path: main/paper.pdf

#     - name: Move generated pdf in with html
#       run: mv main/paper.pdf main/docs/paper.pdf

#     - name: Deploy html and pdf to github pages
#       uses: peaceiris/actions-gh-pages@v3
#       with:
#         github_token: ${{ secrets.GITHUB_TOKEN }}
#         publish_dir: main/docs
